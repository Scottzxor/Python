# Scott Shaulis
# 12-04-2021
# Making a simple port scanner with Python

# Import the necessary libraries

# Network related tasks--converting server name to address, then formatting data into usable format.
import socket

# Spawn processes--in our usage, allows the use of commandline.
import subprocess
import sys
from datetime import datetime

# Use the subprocess 'run' to clear the terminal if shell is up.
subprocess.run('cls', shell=True)

# First, accept input from user to input the host to scan.
externalServer = input("Enter a DNS host name or IP to scan: ")
# Take that variable and use it as an argument to the function that will resolve the DNS to IP.
hostIP = socket.gethostbyname(externalServer)

# Print a Banner providing the user with the info about the scan
print()
print("-" * 60)
print("Please wait, scanning remote host", hostIP)
print("-" * 60)

# Check the starting time of the scan
t1 = datetime.now()

# Use range function to specify ports (It won't scan the final port*, so add one)

try:
    for port in range(1, 1025):
        # Use AF_INET to begin IPv4, then SOCK_STREAM to use TCP handshake.
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Test whether the Python socket-to-host-socket connection is successful. If so, it will return 0.
        result = sock.connect_ex((hostIP, port))
        if result == 0:
            print("Port {}:           Open".format(port))
        sock.close()

# Doesn't appear to work.
except KeyboardInterrupt:
    print("You pressed Ctrl+C")
    sys.exit()

except socket.gaierror:
    print('Host name could not be resolved. Exiting')
    sys.exit()

except socket.error:
    print('Connection with server not established. Exiting')
    sys.exit()
    print()

# Check the ending time of the scan:
t2 = datetime.now()

total = t2-t1

# Print the duration of the scan to the screen.
print('Scan completed in', total)
